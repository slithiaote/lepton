\documentclass[a4paper,10pt]{scrartcl}
% \usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage[english]{babel}
\usepackage{graphicx}
\usepackage[bindingoffset=0cm,width=17cm,height=26cm]{geometry}
\usepackage[moderate]{savetrees}
\usepackage[numbers]{natbib}

\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{fancybox}
\input{lepton.sty}

\begin{document}

\title{Comparison of a few implementations\\ of the Fibonacci sequence}
\author{Li-Thiao-Té Sébastien}
\maketitle

\section{Introduction}

In this document, we use Lepton to compare a few implementations of the computation of the Fibonacci sequence (OCaml, Python and C). This is intended to demonstrate Lepton's features, such as

\begin{itemize}
\item embedding source code inside a document (literate programming)
\item code restructuring for better documentation
\item embedding executable instructions
\end{itemize}

From the point of view of (scientific) applications, these features make it possible to 
\begin{itemize}
\item include and distribute the actual source code
\item distribute the instructions necessary for compiling and running the code
\item certify that the embedded source code is correct by executing it
\item running analysis scripts and generating figures
\item certify that the figures correspond to the provided source code
\item embedding different programming languages in the same document / same platform
\item simplifying code re-use by distributing only a single file.
\end{itemize}

\subsection{Executing this document}

This document is a script and is intended to be executed to produce a PDF file, as well as by-products such as extracted source code or data files. It requires : 
\begin{itemize}
\item Lepton to produce a \verb .tex  \LaTeX document,
\item LaTeX to process the \verb .tex  file into PDF,
\item the Pygments library for syntax highlighting and the \verb minted  \LaTeX package for code beautification.
\end{itemize}

To process the document with Lepton, the user should run the command : 
<<compilation>>=
lepton fibonacci.nw -o fibonacci.tex
@ 

To produce the PDF document, the user should run the following commands. \LaTeX\ needs to run twice to process references. 
<<compilation>>=
# The LaTeX style file lepton.sty should be in a directory accessible to LaTeX
pdflatex fibonacci.tex
pdflatex fibonacci.tex
@ 

\section{Problem statement}

The Fibonacci sequence is defined as the sequence of integers $F_n$ such that 
\begin{align}
  F_0 = 0 \\
  F_1 = 1 \\
  F_n = F_{n-1} + F_{n-2}
\end{align}

The goal is to define a function that returns $F_n$ given the integer $n$.


\section{Implementations}

The proposed implementations in this document are taken from the Rosetta Code project \url{https://rosettacode.org/wiki/Fibonacci_sequence}.

\subsection{Recursive implementation in OCaml}

We define a \verb fibonacci  function in OCaml in the following code chunk. The contents of this chunk are sent by Lepton to an instance of the OCaml interpreter, and the output (the type of the \verb fibonacci  Ocaml object) is captured below automatically.
<<ocaml -exec ocaml -chunk ocaml>>=
let rec fibonacci = function
  | 0 -> 0
  | 1 -> 1
  | n -> fibonacci (n-1) + fibonacci (n-2)
;;
@ 

To check that the function is correct, let us ask OCaml for the first few numbers in the sequence.
<<ocaml>>=
fibonacci 0;;
fibonacci 1;;
fibonacci 2;;
fibonacci 3;;
@ 

\subsection{Iterative implementation in Python}

We define a \verb fibIter  function in Python in the following code chunk. The contents of this chunk are sent by Lepton to an instance of the Python interpreter. There is no output on success.
<<python -exec python -chunk python>>=
def fibIter(n):
    if n < 2:
        return n
    fibPrev = 1
    fib = 1
    for num in xrange(2, n): fibPrev, fib = fib, fib + fibPrev
    return fib

@ 

To check that the function is correct, let us ask Python for the first few numbers in the sequence.
<<python>>=
for i in range(0,4): print fibIter(i),

@ 

\subsection{Iterative implementation in C}

In a compiled language such as C, we need to define the function \verb fibC  first, then include it in a program to use it. Let us start with the function definition.
<<fibC -chunk c>>=
long long int fibC(int n) {
	int fnow = 0, fnext = 1, tempf;
	while(--n>0){
		tempf = fnow + fnext;
		fnow = fnext;
		fnext = tempf;
		}
		return fnext;	
}
@ 

We include this in a program with a \verb main  function. This code chunk contains a reference to the definition of the \verb fibC  function, and Lepton will replace the reference with the corresponding source code.
<<main.c -write -chunk c>>=
#include <stdlib.h>
#include <stdio.h>

<<fibC>>

int main(int argc, char **argv)
{
	int i, n;
	if (argc < 2) return 1;
 
	for (i = 1; i < argc; i++) {
		n = atoi(argv[i]);
		if (n < 0) {
			printf("bad input: %s\n", argv[i]);
			continue;
		}
 
		printf("%i\n", fibC(n));
	}
	return 0;
}
@ 

We configured the \verb main.c  code chunk such that its (expanded) contents are written to disk. We can now compile it with the following shell commands. Note that this implemenation returns an incorrect value for $F_0$.
<<shell -exec shell>>=
gcc main.c -o a.out
./a.out 0 1 2 3
@ 





\section{Comparison of running times}

In this section, we compare the running times of the three proposed implementations. Let us first indicate the system configuration that is used to perform this comparison using shell commands. Note that Python writes to \verb stderr , and we have to redirect its output so that it appears in the PDF document.
<<shell>>=
uname -orvm
ocaml --version
python --version 2>&1
gcc --version
@ 

The time necessary for computing the number $F_n$ depends on the algorithm, language, as well as $n$. We will compute the running times for several values of $n$, then assemble the results into a plot.

\subsection{Ocaml}

Let us define a function \verb time  to measure the time necessary in OCaml. This function uses the \verb Sys  module in the standard library.
<<ocaml>>=
let time niter n = 
  let start = Sys.time() in
  for i = 1 to niter do ignore (fibonacci n) done;
  (Sys.time() -. start) /. float_of_int niter
;;
@ 

Writing the results to disk.
<<ocaml>>=
let oc = open_out "runtimes.ocaml" in 
begin
  output_string oc "# Running times of Fibonacci sequence using Ocaml, time in seconds\n";
  for i = 1 to 9 do 
    output_string oc (string_of_int i ^ "\t" ^ string_of_float (time 1000 i) ^ "\n")
  done;
  close_out oc;
end;;
@ 

We display below the contents of the results file.
<<shell>>=
cat runtimes.ocaml
@ 

N.B. In the above example, all code chunks with the name \verb ocaml  share the same interpreter process. Consequently, the \verb fibonacci  function defined in the first chunk is available in the subsequent chunks. This is the same for the \verb shell  chunks and for the \verb python  chunks.


\subsection{Python}

Similarly, we define a function \verb timefib  to measure the time necessary in Python. There is no output on success.
<<python>>=
from time import clock

def timefib(i):
  start = clock()
  for n in range(0,1000): fibIter(i)
  end = clock()
  return (end-start)/1000

file1 = open("runtimes.python","w")
file1.write("# Running times of Fibonacci sequence using Python, time in seconds\n")
for i in range(1,10): 
  file1.write(str(i))
  file1.write("\t")
  file1.write(str(timefib(i)))
  file1.write("\n")

file1.close()
@ 

We display below the contents of the results file.
<<shell>>=
cat runtimes.python
@ 


\subsection{C}

In C, we write a new program to run the benchmark. Note that this benchmark uses a reference to the \verb fibC  function defined earlier. This ensures that the same code is used in the \verb main.c  and \verb benchmark.c  programs. Lepton automatically inserts a PDF link to the definition of the \verb fibC  function.

<<benchmark.c -write>>=
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

<<fibC>>

int main(int argc, char **argv)
{
    int i,n;
    clock_t t; 
    
    for (n = 1; n<10; n++) {
        t = clock(); 
        for (i=1; i<10000; i++) fibC(n); 
        t = clock() - t; 
        double time_taken = ((double)t)/CLOCKS_PER_SEC / 10000; // in seconds 
        printf("%i\t%e\n",n,time_taken);
    }
 }
@ 

We compile and run the benchmark below.
<<shell>>=
gcc benchmark.c -o bench.out
echo "# Running times of Fibonacci sequence using C, time in seconds" > runtimes.c
./bench.out >> runtimes.c
head runtimes.c
@ 

\subsection{Results and discussion}

We use Gnuplot for making the figures. We first define the gnuplot script.
<<plot.in -write>>=
set terminal pdf
set output "runningtimes.pdf"
plot "runtimes.ocaml" using 1:2 with linespoints, \
     "runtimes.python" using 1:2 with linespoints, \
     "runtimes.c" using 1:2 with linespoints
@ 

We execute the script in gnuplot. This writes a PDF to disk, which is then included in a \LaTeX\ figure.
<<shell>>=
gnuplot plot.in # no output on success
@ 

\begin{figure}
\includegraphics{runningtimes.pdf}
\caption{Running time in seconds for computing $F_n$ as a function of $n$ for the three proposed implementations.}
\label{fig1}
\end{figure}

In Figure \ref{fig1}, we plot the running times necessary to compute the Fibonacci sequence. As expected, the OCaml recursive implementation has exponential complexity in time, whereas the Python and C iterative implementations have linear time complexity. The C implementation is much faster than the Python and OCaml code, which are run inside an interactive loop whereas the C code is compiled. It would be interesting to compare with the programs produced with native code compilers of Python and OCaml or just-in-time compilation. Additionally, the recursive OCaml function runs faster than the iterative Python function for small values of $n$, which suggests that there is less overhead for calling functions in OCaml than in Python.


\section{Conclusion}

This document shows how to compute the Fibonacci sequence in three different programming languages, with one recursive implementation and two iterative implementations. Using Lepton makes it possible to 
\begin{itemize}
\item provide everything in a single executable file that makes it easy to reproduce the results
\item embed source code and executable instructions in a readable manner
\item restructure the source code for easier human comprehension
\item run compilation commands and analysis scripts to ensure that the figures were generated with the provided source code.
\end{itemize}

\end{document}